import { Platform } from "react-native";
import Purchases, { LOG_LEVEL } from "react-native-purchases";

// Configuraci√≥n de RevenueCat - Solo Android
export const REVENUECAT_CONFIG = {
  // API Key de Android
  android: "", // Tu API key de Android
  
  // Configuraci√≥n de debug
  enableLogs: true,
  logLevel: LOG_LEVEL.VERBOSE,
  
  // Configuraci√≥n de modo
  useSandbox: false, // false para usar ofertas reales de tu dashboard
};

// Funci√≥n para inicializar RevenueCat - Solo Android
export async function initializeRevenueCat() {
  try {
    // Solo inicializar en Android
    if (Platform.OS !== "android") {
      console.log("‚ÑπÔ∏è RevenueCat solo est√° configurado para Android. Saltando inicializaci√≥n en", Platform.OS);
      return false;
    }

    // Habilitar logs si est√° en modo debug
    if (REVENUECAT_CONFIG.enableLogs) {
      Purchases.setLogLevel(REVENUECAT_CONFIG.logLevel);
    }

    const apiKey = REVENUECAT_CONFIG.android;
    
    if (!apiKey) {
      console.error("‚ùå Android API key not configured in REVENUECAT_CONFIG");
      return false;
    }

    // Configurar RevenueCat con la API key de Android
    await Purchases.configure({ 
      apiKey,
      appUserID: undefined, // Dejar que RevenueCat genere un ID √∫nico
    });

    console.log("‚úÖ RevenueCat initialized successfully for Android");
    console.log("üîë Using Android API key:", apiKey.substring(0, 10) + "...");
    console.log("üì± Platform:", Platform.OS);
    
    return true;
  } catch (error) {
    console.error("‚ùå Error initializing RevenueCat:", error);
    return false;
  }
}

// Funci√≥n para obtener informaci√≥n del cliente
export async function getCustomerInfo() {
  try {
    const customerInfo = await Purchases.getCustomerInfo();
    console.log("üì¢ Customer Info:", JSON.stringify(customerInfo, null, 2));
    return customerInfo;
  } catch (error) {
    console.error("‚ùå Error getting customer info:", error);
    throw error;
  }
}

// Funci√≥n para obtener ofertas
export async function getOfferings() {
  try {
    const offerings = await Purchases.getOfferings();
    console.log("üì¢ Offerings:", JSON.stringify(offerings, null, 2));
    
    // Verificar si estamos en modo Preview
    if (offerings.current?.identifier === "preview-offering") {
      console.warn("‚ö†Ô∏è Running in Preview mode!");
      console.warn("‚ö†Ô∏è This means RevenueCat is not connecting to your real dashboard.");
      console.warn("‚ö†Ô∏è Check your Android API key and ensure your app is properly configured.");
    } else {
      console.log("‚úÖ Using real offerings from your RevenueCat dashboard");
      console.log("üì¶ Current offering:", offerings.current?.identifier);
      console.log("üì¶ Available packages:", offerings.current?.availablePackages?.length || 0);
    }
    
    return offerings;
  } catch (error) {
    console.error("‚ùå Error getting offerings:", error);
    throw error;
  }
}

// Funci√≥n para realizar una compra
export async function purchasePackage(pkg: any) {
  try {
    const { customerInfo } = await Purchases.purchasePackage(pkg);
    console.log("‚úÖ Purchase successful:", customerInfo);
    return customerInfo;
  } catch (error) {
    console.error("‚ùå Purchase failed:", error);
    throw error;
  }
}

// Funci√≥n para forzar la recarga de ofertas (√∫til para salir del modo Preview)
export async function refreshOfferings() {
  try {
    console.log("üîÑ Refreshing offerings...");
    
    // Invalidar cach√© de ofertas
    await Purchases.invalidateCustomerInfoCache();
    
    // Obtener ofertas frescas
    const offerings = await Purchases.getOfferings();
    
    console.log("üì¢ Fresh Offerings:", JSON.stringify(offerings, null, 2));
    return offerings;
  } catch (error) {
    console.error("‚ùå Error refreshing offerings:", error);
    throw error;
  }
}
